CREATE SCHEMA MAPSKILLS;

CREATE TABLE IF NOT EXISTS MAPSKILLS.LOGIN (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, USERNAME VARCHAR(100) UNIQUE, PASSWORD VARCHAR(255));

CREATE TABLE IF NOT EXISTS MAPSKILLS.INSTITUTION (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, CODE VARCHAR(5) UNIQUE, CNPJ BIGINT UNIQUE, COMPANY VARCHAR(250) UNIQUE, CITY VARCHAR(250), LEVEL INTEGER, ID_GAME_THEME INTEGER);

CREATE TABLE IF NOT EXISTS MAPSKILLS.MENTOR (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, NAME VARCHAR(250), ID_LOGIN INTEGER, ID_INSTITUTION INTEGER, FOREIGN KEY (ID_LOGIN) REFERENCES MAPSKILLS.LOGIN(ID), FOREIGN KEY (ID_INSTITUTION) REFERENCES MAPSKILLS.INSTITUTION(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.COURSE (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, CODE VARCHAR(5) UNIQUE, NAME VARCHAR(250), "_PERIOD" INTEGER, ID_INSTITUTION INTEGER, FOREIGN KEY (ID_INSTITUTION) REFERENCES MAPSKILLS.INSTITUTION(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.STUDENT (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, NAME VARCHAR(250), RA VARCHAR(15) UNIQUE, PHONE VARCHAR(15), COMPLETED BOOLEAN, INSTITUTION_CODE VARCHAR(5), COURSE_CODE VARCHAR(5), START_YEAR INTEGER, START_SEMESTER INTEGER, CODE VARCHAR(6), ID_LOGIN INTEGER, ID_COURSE INTEGER, FOREIGN KEY (ID_LOGIN) REFERENCES MAPSKILLS.LOGIN(ID), FOREIGN KEY (ID_COURSE) REFERENCES MAPSKILLS.COURSE(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.ADMINISTRATOR (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, NAME VARCHAR(250), ID_LOGIN INTEGER, FOREIGN KEY (ID_LOGIN) REFERENCES MAPSKILLS.LOGIN(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.SKILL (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, NAME VARCHAR(250), DESCRIPTION VARCHAR(250));

CREATE TABLE IF NOT EXISTS MAPSKILLS.GAME_THEME (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, NAME VARCHAR(250), ACTIVE BOOLEAN);

CREATE TABLE IF NOT EXISTS MAPSKILLS.QUESTION (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, ID_SKILL INTEGER NOT NULL, FOREIGN KEY (ID_SKILL) REFERENCES MAPSKILLS.SKILL(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.ALTERNATIVE (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, DESCRIPTION VARCHAR(250), SKILL_VALUE INTEGER, ID_QUESTION INTEGER, FOREIGN KEY (ID_QUESTION) REFERENCES MAPSKILLS.QUESTION(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.SCENE (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, "_INDEX" INTEGER, TEXT VARCHAR(250), IMAGE_NAME VARCHAR(250), ID_GAME_THEME INTEGER, ID_QUESTION INTEGER, FOREIGN KEY (ID_GAME_THEME) REFERENCES MAPSKILLS.GAME_THEME(ID), FOREIGN KEY (ID_QUESTION) REFERENCES MAPSKILLS.QUESTION(ID));

CREATE TABLE IF NOT EXISTS MAPSKILLS.STUDENT_QUESTION_CONTEXT (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, "DATE" DATE, SKILL_VALUE INTEGER, ID_STUDENT INTEGER, ID_SKILL INTEGER, ID_SCENE INTEGER, SCENE_INDEX INTEGER, FOREIGN KEY (ID_STUDENT) REFERENCES MAPSKILLS.STUDENT(ID), FOREIGN KEY (ID_SCENE) REFERENCES MAPSKILLS.SCENE(ID), FOREIGN KEY (ID_SKILL) REFERENCES MAPSKILLS.SKILL(ID));


CREATE VIEW MAPSKILLS.STUDENT_RADAR_RESULT_VIEW AS SELECT UUID() AS ID, SQC.ID_STUDENT AS ID_STUDENT, S.NAME AS SKILL_NAME, S.DESCRIPTION AS SKILL_DESCRIPTION, SUM(SQC.SKILL_VALUE) AS TOTAL FROM MAPSKILLS.SKILL S INNER JOIN MAPSKILLS.STUDENT_QUESTION_CONTEXT SQC ON SQC.ID_SKILL = S.ID GROUP BY ID_STUDENT, SKILL_NAME, SKILL_DESCRIPTION ORDER BY ID_STUDENT ASC;

CREATE VIEW MAPSKILLS.INSTITUTION_STUDENTS_PROGRESS_VIEW AS SELECT UUID() AS ID, S0.START_YEAR AS START_YEAR, S0.START_SEMESTER AS START_SEMESTER, I.CODE AS INSTITUTION_CODE, I.LEVEL AS INSTITUTION_LEVEL, C.CODE AS COURSE_CODE, C.NAME AS COURSE_NAME, (SELECT COUNT(S1.ID) FROM MAPSKILLS.STUDENT S1 WHERE S1.COMPLETED = 0 AND S1.INSTITUTION_CODE = I.CODE AND S1.COURSE_CODE = C.CODE AND S1.START_YEAR = S0.START_YEAR AND S1.START_SEMESTER = S0.START_SEMESTER) AS NOT_FINALIZED, (SELECT COUNT(S2.ID) FROM MAPSKILLS.STUDENT S2 WHERE S2.COMPLETED = 1 AND S2.INSTITUTION_CODE = I.CODE AND S2.COURSE_CODE = C.CODE AND S2.START_YEAR = S0.START_YEAR AND S2.START_SEMESTER = S0.START_SEMESTER) AS FINALIZED FROM MAPSKILLS.STUDENT S0 INNER JOIN MAPSKILLS.COURSE C ON S0.ID_COURSE = C.ID INNER JOIN MAPSKILLS.INSTITUTION I ON C.ID_INSTITUTION = I.ID GROUP BY START_YEAR, START_SEMESTER, I.CODE, INSTITUTION_LEVEL, C.CODE, COURSE_NAME;

CREATE VIEW MAPSKILLS.ADMIN_GLOBAL_STUDENTS_PROGRESS_VIEW AS SELECT UUID() AS ID, S0.START_YEAR AS START_YEAR, S0.START_SEMESTER AS START_SEMESTER, I.LEVEL AS LEVEL, (SELECT COUNT(S1.ID) FROM MAPSKILLS.STUDENT S1 INNER JOIN MAPSKILLS.INSTITUTION I1 ON S1.INSTITUTION_CODE = I1.CODE WHERE S1.COMPLETED = 0 AND S1.START_YEAR = S0.START_YEAR AND S1.START_SEMESTER = S0.START_SEMESTER AND I.LEVEL = I1.LEVEL) AS NOT_FINALIZED, (SELECT COUNT(S2.ID) FROM MAPSKILLS.STUDENT S2 INNER JOIN MAPSKILLS.INSTITUTION I2 ON S2.INSTITUTION_CODE = I2.CODE WHERE S2.COMPLETED = 1 AND S2.START_YEAR = S0.START_YEAR AND S2.START_SEMESTER = S0.START_SEMESTER AND I.LEVEL = I2.LEVEL) AS FINALIZED, COUNT(S0.ID) TOTAL FROM MAPSKILLS.STUDENT S0 INNER JOIN MAPSKILLS.INSTITUTION I ON S0.INSTITUTION_CODE = I.CODE GROUP BY START_YEAR, START_SEMESTER, LEVEL;

CREATE VIEW MAPSKILLS.ADMIN_LEVEL_STUDENTS_PROGRESS_VIEW AS SELECT UUID() AS ID, S0.START_YEAR AS START_YEAR, S0.START_SEMESTER AS START_SEMESTER, I.CODE AS CODE, I.LEVEL AS LEVEL, I.COMPANY AS COMPANY,(SELECT COUNT(S1.ID) FROM MAPSKILLS.STUDENT S1 WHERE S1.COMPLETED = 0 AND S1.START_YEAR = S0.START_YEAR AND S1.START_SEMESTER = S0.START_SEMESTER AND S1.INSTITUTION_CODE = I.CODE) AS NOT_FINALIZED, (SELECT COUNT(S2.ID) FROM MAPSKILLS.STUDENT S2 WHERE S2.COMPLETED = 1 AND S2.START_YEAR = S0.START_YEAR AND S2.START_SEMESTER = S0.START_SEMESTER AND S2.INSTITUTION_CODE = I.CODE) AS FINALIZED, COUNT(S0.ID) AS TOTAL FROM MAPSKILLS.STUDENT S0 INNER JOIN MAPSKILLS.INSTITUTION I ON S0.INSTITUTION_CODE = I.CODE GROUP BY START_YEAR, START_SEMESTER, I.CODE, LEVEL, COMPANY;

CREATE VIEW MAPSKILLS.CSV_REPORT_VIEW AS SELECT S.ID AS STUDENT_ID, S.RA AS STUDENT_RA, S.NAME AS STUDENT_NAME, C.CODE AS COURSE_CODE, C.NAME AS COURSE_NAME, I.CODE AS INSTITUTION_CODE, I.COMPANY AS INSTITUTION_COMPANY, I.LEVEL AS INSTITUTION_LEVEL, S.START_YEAR AS START_YEAR, S.START_SEMESTER AS START_SEMESTER FROM MAPSKILLS.STUDENT S INNER JOIN MAPSKILLS.COURSE C ON S.ID_COURSE = C.ID INNER JOIN MAPSKILLS.INSTITUTION I ON C.ID_INSTITUTION = I.ID WHERE S.COMPLETED = TRUE ORDER BY START_YEAR DESC, START_SEMESTER DESC, STUDENT_RA;